DROP TABLE IF EXISTS "user" CASCADE;
DROP TABLE IF EXISTS film CASCADE;
DROP TABLE IF EXISTS director CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS user_like CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS director_film CASCADE;

CREATE TABLE IF NOT EXISTS mpa_rating
(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS genre
(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film
(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(200),
  release_date DATE NOT NULL,
  duration INTEGER NOT NULL CHECK (duration > 0),
  mpa_rating_id BIGINT,
  FOREIGN KEY (mpa_rating_id) REFERENCES mpa_rating (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS film_genre
(
  film_id BIGINT,
  genre_id BIGINT,
  PRIMARY KEY (film_id, genre_id),
  FOREIGN KEY (film_id) REFERENCES film (id) ON DELETE CASCADE,
  FOREIGN KEY (genre_id) REFERENCES genre (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "user"
(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  login VARCHAR(100) NOT NULL UNIQUE,
  name VARCHAR,
  birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS user_like
(
  film_id BIGINT,
  user_id BIGINT,
  PRIMARY KEY (film_id, user_id),
  FOREIGN KEY (film_id) REFERENCES film (id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendship
(
  id BIGINT,
  friend_id BIGINT,
  status BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (id, friend_id),
  FOREIGN KEY (id) REFERENCES "user" (id) ON DELETE CASCADE,
  FOREIGN KEY (friend_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews
(
  review_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content VARCHAR(1000),
  is_positive BOOLEAN NOT NULL,
  user_id BIGINT,
  film_id BIGINT,
  useful INTEGER DEFAULT 0,
  FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE,
  FOREIGN KEY (film_id) REFERENCES film (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes
(
  review_id BIGINT,
  user_id BIGINT,
  is_useful BOOLEAN NOT NULL,
  PRIMARY KEY (review_id, user_id),
  FOREIGN KEY (review_id) REFERENCES reviews (review_id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_film_name ON film (name);

CREATE TABLE IF NOT EXISTS director
(
  id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS director_film
(
  director_id BIGINT,
  film_id BIGINT,
  PRIMARY KEY (director_id, film_id),
  FOREIGN KEY (director_id) REFERENCES director (id) ON DELETE CASCADE,
  FOREIGN KEY (film_id) REFERENCES film (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS event_type (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS operation (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS event
(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_type_id BIGINT,
  operation_id BIGINT,
  timestamp TIMESTAMP,
  user_id BIGINT,
  entity_id BIGINT,
  FOREIGN KEY (event_type_id) REFERENCES event_type(id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (operation_id) REFERENCES operation(id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  FOREIGN KEY (user_id) REFERENCES "user"(id)
);